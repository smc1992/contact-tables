generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas  = ["public"]
}

enum UserRole {
  CUSTOMER
  RESTAURANT
  ADMIN

  @@schema("public")
}

enum Language {
  DE
  EN
  ES
  PT
  FR

  @@schema("public")
}

enum ContractStatus {
  PENDING
  ACTIVE
  CANCELLED
  REJECTED
  APPROVED

  @@schema("public")
}

enum EventStatus {
  OPEN
  FULL
  CLOSED
  PAST

  @@schema("public")
}

enum CmsSectionType {
  HERO
  FEATURE
  FOOTER
  TESTIMONIAL
  BANNER

  @@schema("public")
}

enum ContactMessageStatus {
  NEW
  READ
  REPLIED
  ARCHIVED

  @@schema("public")
}

model Profile {
  id               String   @id @db.Uuid // Maps to Supabase auth.users.id
  name             String? // Populated by trigger from raw_user_meta_data or similar
  languageCode     String?  @default("DE") @map("language_code")
  isPaying         Boolean? @default(false) @map("is_paying")
  stripeCustomerId String?  @unique @map("stripe_customer_id")
  role             UserRole @default(CUSTOMER)
  stripeSubscriptionId String? @unique @map("stripe_subscription_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  restaurant    Restaurant?
  events        EventParticipant[]
  ratings       Rating[]
  notifications Notification[]
  invoices      Invoice[]
  favorites     Favorite[]
  userSettings  UserSetting? // Added relation
  adminProfile  Admin? // Added relation if Admin links back to Profile via id

  @@map("profiles")
  @@schema("public")
}

model Restaurant {
  id                     String         @id @default(uuid()) @db.Uuid
  userId                 String         @unique @db.Uuid // Foreign key to Profile.id (which is auth.users.id)
  profile                Profile        @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                   String
  slug               String?         @unique
  address                String?
  postal_code            String?
  city                   String?
  country                String?
  description            String?        @db.Text
  bookingUrl             String?        @map("booking_url")
  imageUrl               String?        @map("image_url")
  cuisine                String?
  capacity               Int?
  contractStartDate      DateTime?      @map("contract_start_date")
  trialEndDate           DateTime?      @map("trial_end_date")
  contractStatus         ContractStatus @default(PENDING) @map("contract_status")
  isVisible              Boolean        @default(false) @map("is_visible")
  offerTableToday        Boolean        @default(false) @map("offer_table_today")
  stripeSubscriptionId   String?        @map("stripe_subscription_id")
  phone                  String?
  email                  String? // Restaurant's contact email
  website                String?
  openingHours           String?        @map("opening_hours")
  latitude               Float?
  longitude              Float?
  priceRange             String?        @map("price_range")
  isActive               Boolean        @default(false) @map("is_active")
  plan                   String?
  contractToken          String?        @unique @map("contract_token")
  contractTokenExpiresAt DateTime?      @map("contract_token_expires_at")
  contractAcceptedAt     DateTime?      @map("contract_accepted_at")
  notificationSettings Json?          @map("notification_settings")
  privacySettings      Json?          @map("privacy_settings")

  events   Event[]
  images   RestaurantImage[]
  documents Document[]
  invoices Invoice[]
  contract Contract?
  favorites Favorite[]
  ratings   Rating[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("restaurants")
  @@schema("public")
}

model Event {
  id              String     @id @default(cuid())
  title           String
  description     String?    @db.Text
  datetime        DateTime
  maxParticipants Int        @map("max_participants")
  price           Float      @default(0)
  restaurantId    String     @db.Uuid @map("restaurant_id")
  restaurant      Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  status          EventStatus @default(OPEN)
  isPublic        Boolean    @default(true) @map("is_public")

  participants EventParticipant[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("contact_tables")
  @@schema("public")
}

model EventParticipant {
  id       String   @id @default(cuid())
  eventId  String   @map("event_id")
  userId   String   @map("user_id") @db.Uuid
  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  profile  Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)
  isHost   Boolean  @default(false) @map("is_host")
  message  String?  @db.Text
  joinedAt DateTime @default(now()) @map("joined_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([eventId, userId])
  @@map("participations")
  @@schema("public")
}

model Invoice {
  id              String   @id @default(cuid())
  amount          Float
  currency        String
  date            DateTime @default(now())
  stripeInvoiceId String   @unique @map("stripe_invoice_id")
  downloadUrl     String   @map("download_url")

  userId       String?     @map("user_id") @db.Uuid
  profile      Profile?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  restaurantId String?     @db.Uuid @map("restaurant_id")
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@schema("public")
}

model RestaurantImage {
  id           String     @id @default(cuid())
  restaurantId String     @db.Uuid @map("restaurant_id")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  url          String
  publicId     String     @map("public_id")
  isPrimary    Boolean    @default(false) @map("is_primary")

  @@map("restaurant_images")
  @@schema("public")
}

model Document {
  id           String     @id @default(cuid())
  title        String
  url          String
  storagePath  String     @map("storage_path")
  fileType     String     @map("file_type")
  fileSize     Int        @map("file_size")
  restaurantId String     @db.Uuid @map("restaurant_id")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("documents")
  @@schema("public")
}

model Contract {
  id               String         @id @default(cuid())
  restaurantId     String         @unique @db.Uuid @map("restaurant_id")
  restaurant       Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  status           ContractStatus
  startDate        DateTime       @map("start_date")
  trialEndDate     DateTime?      @map("trial_end_date")
  cancellationDate DateTime?      @map("cancellation_date")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@schema("public")
}

model Translation {
  id           String   @id @default(cuid())
  key          String
  languageCode Language @map("language_code")
  value        String   @db.Text

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([key, languageCode])
  @@schema("public")
}

model ContactMessage {
  id      String               @id @default(cuid())
  name    String
  email   String
  subject String
  message String               @db.Text
  status  ContactMessageStatus @default(NEW)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@schema("public")
}

model CmsSection {
  id           String         @id @default(cuid())
  title        String
  key          String
  content      String         @db.Text
  position     Int
  isActive     Boolean        @default(true) @map("is_active")
  languageCode Language       @map("language_code")
  type         CmsSectionType

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([key, languageCode])
  @@schema("public")
}

model Favorite {
  id           String     @id @default(cuid())
  userId       String     @map("user_id") @db.Uuid
  profile      Profile    @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurantId String     @map("restaurant_id") @db.Uuid
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, restaurantId])
  @@map("favorites")
  @@schema("public")
}

model Rating {
  id           String     @id @default(cuid())
  value        Int        @default(0)
  comment      String?    @db.Text
  userId       String     @map("user_id") @db.Uuid
  profile      Profile    @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurantId String     @map("restaurant_id") @db.Uuid
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, restaurantId])
  @@map("ratings")
  @@schema("public")
}

model Notification {
  id       String  @id @default(cuid())
  title    String
  content  String  @db.Text
  type     String
  isRead   Boolean @default(false) @map("is_read")
  metadata Json?
  userId   String  @map("user_id") @db.Uuid
  profile  Profile @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId, isRead])
  @@map("notifications")
  @@schema("public")
}

model UserSetting {
  id                String  @id @default(cuid())
  userId            String  @unique @map("user_id") @db.Uuid
  profile           Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
  receiveNewsletter Boolean @default(true) @map("receive_newsletter")
  eventReminders    Boolean @default(true) @map("event_reminders")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user_settings")
  @@schema("public")
}

model PartnerRequest {
  id             String  @id @default(cuid())
  restaurantName String  @map("restaurant_name")
  contactEmail   String  @map("contact_email")
  contactName    String  @map("contact_name")
  message        String? @db.Text
  status         String  @default("PENDING") // PENDING, APPROVED, REJECTED

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("partner_requests")
  @@schema("public")
}

model Admin {
  id                String  @id @db.Uuid // This is the user_id from auth.users, effectively Profile.id
  profile           Profile @relation(fields: [id], references: [id], onDelete: Cascade, map: "admin_id_fkey") // Explicit map for relation name
  canManageUsers    Boolean @default(false) @map("can_manage_users")
  canManageSettings Boolean @default(false) @map("can_manage_settings")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("admins")
  @@schema("public")
}


