generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

model Profile {
  id                   String              @id @db.Uuid
  name                 String?
  firstName            String?             @map("first_name")
  lastName             String?             @map("last_name")
  phone                String?
  address              String?
  city                 String?
  zipCode              String?             @map("zip_code")
  languageCode         String?             @default("DE") @map("language_code")
  isPaying             Boolean?            @default(false) @map("is_paying")
  stripeCustomerId     String?             @unique @map("stripe_customer_id")
  role                 UserRole            @default(CUSTOMER)
  stripeSubscriptionId String?             @unique @map("stripe_subscription_id")
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")
  invoices             Invoice[]
  adminProfile         Admin?
  favorites            Favorite[]
  notifications        Notification[]
  events               EventParticipant[]
  ratings              Rating[]
  restaurant           Restaurant?
  userSettings         UserSetting?
  tagAssignments       UserTagAssignment[]

  @@map("profiles")
  @@schema("public")
}

model Restaurant {
  id                     String            @id @default(uuid()) @db.Uuid
  userId                 String            @unique @db.Uuid
  name                   String
  slug                   String?           @unique
  address                String?
  postal_code            String?
  city                   String?
  country                String?
  description            String?
  bookingUrl             String?           @map("booking_url")
  imageUrl               String?           @map("image_url")
  cuisine                String?
  capacity               Int?
  contractStartDate      DateTime?         @map("contract_start_date")
  trialEndDate           DateTime?         @map("trial_end_date")
  contractStatus         ContractStatus    @default(PENDING) @map("contract_status")
  isVisible              Boolean           @default(false) @map("is_visible")
  offerTableToday        Boolean           @default(false) @map("offer_table_today")
  stripeSubscriptionId   String?           @map("stripe_subscription_id")
  phone                  String?
  email                  String?
  website                String?
  openingHours           String?           @map("opening_hours")
  latitude               Float?
  longitude              Float?
  priceRange             String?           @map("price_range")
  isActive               Boolean           @default(false) @map("is_active")
  plan                   String?
  contractToken          String?           @unique @map("contract_token")
  contractTokenExpiresAt DateTime?         @map("contract_token_expires_at")
  contractAcceptedAt     DateTime?         @map("contract_accepted_at")
  notificationSettings   Json?             @map("notification_settings")
  privacySettings        Json?             @map("privacy_settings")
  createdAt              DateTime          @default(now()) @map("created_at")
  updatedAt              DateTime          @updatedAt @map("updated_at")
  contract               Contract?
  invoices               Invoice[]
  events                 Event[]
  documents              Document[]
  favorites              Favorite[]
  ratings                Rating[]
  images                 RestaurantImage[]
  profile                Profile           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("restaurants")
  @@schema("public")
}

model Event {
  id              String             @id @default(cuid())
  title           String
  description     String?
  datetime        DateTime
  maxParticipants Int                @map("max_participants")
  price           Float              @default(0)
  restaurantId    String             @map("restaurant_id") @db.Uuid
  status          EventStatus        @default(OPEN)
  isPublic        Boolean            @default(true) @map("is_public")
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @updatedAt @map("updated_at")
  restaurant      Restaurant         @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  participants    EventParticipant[]

  @@map("contact_tables")
  @@schema("public")
}

model EventParticipant {
  id        String   @id @default(cuid())
  eventId   String   @map("event_id")
  userId    String   @map("user_id") @db.Uuid
  isHost    Boolean  @default(false) @map("is_host")
  message   String?
  joinedAt  DateTime @default(now()) @map("joined_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  profile   Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("participations")
  @@schema("public")
}

model Invoice {
  id              String      @id @default(cuid())
  amount          Float
  currency        String
  date            DateTime    @default(now())
  stripeInvoiceId String      @unique @map("stripe_invoice_id")
  downloadUrl     String      @map("download_url")
  userId          String?     @map("user_id") @db.Uuid
  restaurantId    String?     @map("restaurant_id") @db.Uuid
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  restaurant      Restaurant? @relation(fields: [restaurantId], references: [id])
  profile         Profile?    @relation(fields: [userId], references: [id])

  @@schema("public")
}

model RestaurantImage {
  id           String     @id @default(cuid())
  restaurantId String     @map("restaurant_id") @db.Uuid
  url          String
  publicId     String     @map("public_id")
  isPrimary    Boolean    @default(false) @map("is_primary")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("restaurant_images")
  @@schema("public")
}

model Document {
  id           String     @id @default(cuid())
  title        String
  url          String
  storagePath  String     @map("storage_path")
  fileType     String     @map("file_type")
  fileSize     Int        @map("file_size")
  restaurantId String     @map("restaurant_id") @db.Uuid
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("documents")
  @@schema("public")
}

model Contract {
  id               String         @id @default(cuid())
  restaurantId     String         @unique @map("restaurant_id") @db.Uuid
  status           ContractStatus
  startDate        DateTime       @map("start_date")
  trialEndDate     DateTime?      @map("trial_end_date")
  cancellationDate DateTime?      @map("cancellation_date")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  restaurant       Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@schema("public")
}

model Translation {
  id           String   @id @default(cuid())
  key          String
  languageCode Language @map("language_code")
  value        String
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@unique([key, languageCode])
  @@schema("public")
}

model ContactMessage {
  id        String               @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  status    ContactMessageStatus @default(NEW)
  createdAt DateTime             @default(now()) @map("created_at")
  updatedAt DateTime             @updatedAt @map("updated_at")

  @@schema("public")
}

model CmsSection {
  id           String         @id @default(cuid())
  title        String
  key          String
  content      String
  position     Int
  isActive     Boolean        @default(true) @map("is_active")
  languageCode Language       @map("language_code")
  type         CmsSectionType
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")

  @@unique([key, languageCode])
  @@schema("public")
}

model Favorite {
  id           String     @id @default(cuid())
  userId       String     @map("user_id") @db.Uuid
  restaurantId String     @map("restaurant_id") @db.Uuid
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  profile      Profile    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, restaurantId])
  @@map("favorites")
  @@schema("public")
}

model Rating {
  id           String     @id @default(cuid())
  value        Int        @default(0)
  comment      String?
  userId       String     @map("user_id") @db.Uuid
  restaurantId String     @map("restaurant_id") @db.Uuid
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  profile      Profile    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, restaurantId])
  @@map("ratings")
  @@schema("public")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  content   String
  type      String
  isRead    Boolean  @default(false) @map("is_read")
  metadata  Json?
  userId    String   @map("user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  profile   Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@map("notifications")
  @@schema("public")
}

model UserSetting {
  id                String   @id @default(cuid())
  userId            String   @unique @map("user_id") @db.Uuid
  receiveNewsletter Boolean  @default(true) @map("receive_newsletter")
  eventReminders    Boolean  @default(true) @map("event_reminders")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  profile           Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
  @@schema("public")
}

model PartnerRequest {
  id             String   @id @default(cuid())
  restaurantName String   @map("restaurant_name")
  contactEmail   String   @map("contact_email")
  contactName    String   @map("contact_name")
  message        String?
  status         String   @default("PENDING")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("partner_requests")
  @@schema("public")
}

model Admin {
  id                String   @id @db.Uuid
  canManageUsers    Boolean  @default(false) @map("can_manage_users")
  canManageSettings Boolean  @default(false) @map("can_manage_settings")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  profile           Profile  @relation(fields: [id], references: [id], onDelete: Cascade, map: "admin_id_fkey")

  @@map("admins")
  @@schema("public")
}

model UserTag {
  id          String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String              @unique
  description String?
  createdAt   DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  assignments UserTagAssignment[]

  @@map("user_tags")
  @@schema("public")
}

model UserTagAssignment {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  tagId     String   @map("tag_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  tag       UserTag  @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      Profile  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, tagId])
  @@index([tagId])
  @@index([userId])
  @@map("user_tag_assignments")
  @@schema("public")
}

model system_settings {
  id                        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  site_name                 String    @default("Contact Tables") @db.VarChar(255)
  site_description          String?   @default("Restaurant Reservierungssystem")
  contact_email             String?   @default("info@contact-tables.org") @db.VarChar(255)
  support_phone             String?   @default("+49123456789") @db.VarChar(255)
  maintenance_mode          Boolean?  @default(false)
  registration_enabled      Boolean?  @default(true)
  default_subscription_days Int?      @default(30)
  max_featured_restaurants  Int?      @default(6)
  google_maps_api_key       String?   @db.VarChar(255)
  smtp_host                 String?   @db.VarChar(255)
  smtp_port                 Int?
  smtp_user                 String?   @db.VarChar(255)
  smtp_password             String?   @db.VarChar(255)
  email_signature           String?
  updated_at                DateTime? @default(now()) @db.Timestamptz(6)

  @@schema("public")
}

model email_campaigns {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subject        String
  content        String
  status         String           @default("draft")
  recipient_count Int             @default(0)
  sent_count     Int              @default(0)
  failed_count   Int              @default(0)
  skipped_count  Int              @default(0)
  sent_by        String           @db.Uuid
  template_id    String?          @db.Uuid
  status_message String?
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  updated_at     DateTime         @default(now()) @updatedAt @db.Timestamptz(6)
  completed_at   DateTime?        @db.Timestamptz(6)
  batches        email_batches[]
  recipients     email_recipients[]

  @@index([status])
  @@index([sent_by])
  @@schema("public")
}

model email_recipients {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaign_id     String         @db.Uuid
  batch_id        String?        @db.Uuid
  recipient_id    String         @db.Uuid
  recipient_email String
  status          String         @default("pending")
  status_message  String?
  sent_at         DateTime       @default(now()) @db.Timestamptz(6)
  campaign        email_campaigns @relation(fields: [campaign_id], references: [id], onDelete: Cascade)
  batch           email_batches?  @relation(fields: [batch_id], references: [id], onDelete: SetNull)

  @@index([campaign_id])
  @@index([batch_id])
  @@index([recipient_id])
  @@index([status])
  @@schema("public")
}

model email_batches {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaign_id     String           @db.Uuid
  status          String           @default("pending")
  recipient_count Int              @default(0)
  sent_count      Int              @default(0)
  failed_count    Int              @default(0)
  skipped_count   Int              @default(0)
  status_message  String?
  processing_time Float?
  send_rate       Float?
  created_at      DateTime         @default(now()) @db.Timestamptz(6)
  updated_at      DateTime         @default(now()) @updatedAt @db.Timestamptz(6)
  completed_at    DateTime?        @db.Timestamptz(6)
  campaign        email_campaigns  @relation(fields: [campaign_id], references: [id], onDelete: Cascade)
  recipients      email_recipients[]

  @@index([campaign_id])
  @@index([status])
  @@schema("public")
}

model email_templates {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  subject     String
  content     String
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime  @default(now()) @updatedAt @db.Timestamptz(6)

  @@schema("public")
}

model unsubscribe_tokens {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token      String    @unique
  email      String
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  expires_at DateTime  @db.Timestamptz(6)

  @@index([token])
  @@index([email])
  @@schema("public")
}

model unsubscribed_emails {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email      String    @unique
  reason     String?
  created_at DateTime  @default(now()) @db.Timestamptz(6)

  @@index([email])
  @@schema("public")
}

enum UserRole {
  CUSTOMER
  RESTAURANT
  ADMIN

  @@schema("public")
}

enum Language {
  DE
  EN
  ES
  PT
  FR

  @@schema("public")
}

enum ContractStatus {
  PENDING
  ACTIVE
  CANCELLED
  REJECTED
  APPROVED

  @@schema("public")
}

enum EventStatus {
  OPEN
  FULL
  CLOSED
  PAST

  @@schema("public")
}

enum CmsSectionType {
  HERO
  FEATURE
  FOOTER
  TESTIMONIAL
  BANNER

  @@schema("public")
}

enum ContactMessageStatus {
  NEW
  READ
  REPLIED
  ARCHIVED

  @@schema("public")
}
