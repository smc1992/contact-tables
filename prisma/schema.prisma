generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "auth"]
}

enum UserRole {
  CUSTOMER
  RESTAURANT
  ADMIN

  @@schema("public")
}

enum Language {
  DE
  EN
  ES
  PT
  FR

  @@schema("public")
}

enum ContractStatus {
  PENDING
  ACTIVE
  CANCELLED
  REJECTED
  APPROVED

  @@schema("public")
}

enum EventStatus {
  OPEN
  FULL
  CLOSED
  PAST

  @@schema("public")
}

enum CmsSectionType {
  HERO
  FEATURE
  FOOTER
  TESTIMONIAL
  BANNER

  @@schema("public")
}

enum ContactMessageStatus {
  NEW
  READ
  REPLIED
  ARCHIVED

  @@schema("public")
}

model Profile {
  id               String   @id @db.Uuid // Maps to Supabase auth.users.id
  name             String? // Populated by trigger from raw_user_meta_data or similar
  languageCode     String?  @default("DE") @map("language_code")
  isPaying         Boolean? @default(false) @map("is_paying")
  stripeCustomerId String?  @unique @map("stripe_customer_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  restaurant    Restaurant?
  events        EventParticipant[]
  ratings       Rating[]
  notifications Notification[]
  invoices      Invoice[]
  favorites     Favorite[]
  userSettings  UserSetting? // Added relation
  adminProfile  Admin? // Added relation if Admin links back to Profile via id

  @@map("profiles")
  @@schema("public")
}

model Restaurant {
  id                     String         @id @default(uuid()) @db.Uuid
  userId                 String         @unique @db.Uuid // Foreign key to Profile.id (which is auth.users.id)
  profile                Profile        @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                   String
  address                String?
  city                   String?
  postalCode             String?        @map("postal_code")
  country                String?
  description            String?        @db.Text
  bookingUrl             String?        @map("booking_url")
  imageUrl               String?        @map("image_url")
  cuisine                String?
  capacity               Int?
  contractStartDate      DateTime?      @map("contract_start_date")
  trialEndDate           DateTime?      @map("trial_end_date")
  contractStatus         ContractStatus @default(PENDING) @map("contract_status")
  isVisible              Boolean        @default(false) @map("is_visible")
  offerTableToday        Boolean        @default(false) @map("offer_table_today")
  stripeSubscriptionId   String?        @map("stripe_subscription_id")
  phone                  String?
  email                  String? // Restaurant's contact email
  website                String?
  openingHours           String?        @map("opening_hours")
  latitude               Float?
  longitude              Float?
  priceRange             String?        @map("price_range")
  isActive               Boolean        @default(false) @map("is_active")
  plan                   String?
  contractToken          String?        @unique @map("contract_token")
  contractTokenExpiresAt DateTime?      @map("contract_token_expires_at")
  contractAcceptedAt     DateTime?      @map("contract_accepted_at")

  events   Event[]
  images   RestaurantImage[]
  invoices Invoice[]
  contract Contract?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("restaurants")
  @@schema("public")
}

model Event {
  id              String     @id @default(cuid())
  title           String
  description     String?    @db.Text
  datetime        DateTime
  maxParticipants Int        @map("max_participants")
  price           Float      @default(0)
  restaurantId    String     @db.Uuid @map("restaurant_id")
  restaurant      Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  status          EventStatus @default(OPEN)
  isPublic        Boolean    @default(true) @map("is_public")

  participants EventParticipant[]
  favorites    Favorite[] // Added relation
  ratings      Rating[] // Added relation

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("contact_tables")
  @@schema("public")
}

model EventParticipant {
  id       String   @id @default(cuid())
  eventId  String   @map("event_id")
  userId   String   @map("user_id") @db.Uuid
  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  profile  Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)
  isHost   Boolean  @default(false) @map("is_host")
  message  String?  @db.Text
  joinedAt DateTime @default(now()) @map("joined_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([eventId, userId])
  @@map("participations")
  @@schema("public")
}

model Invoice {
  id              String   @id @default(cuid())
  amount          Float
  currency        String
  date            DateTime @default(now())
  stripeInvoiceId String   @unique @map("stripe_invoice_id")
  downloadUrl     String   @map("download_url")

  userId       String?     @map("user_id") @db.Uuid
  profile      Profile?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  restaurantId String?     @db.Uuid @map("restaurant_id")
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@schema("public")
}

model RestaurantImage {
  id           String     @id @default(cuid())
  restaurantId String     @db.Uuid @map("restaurant_id")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  url          String
  isPrimary    Boolean    @default(false) @map("is_primary")

  @@map("restaurant_images")
  @@schema("public")
}

model Contract {
  id               String         @id @default(cuid())
  restaurantId     String         @unique @db.Uuid @map("restaurant_id")
  restaurant       Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  status           ContractStatus
  startDate        DateTime       @map("start_date")
  trialEndDate     DateTime?      @map("trial_end_date")
  cancellationDate DateTime?      @map("cancellation_date")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@schema("public")
}

model Translation {
  id           String   @id @default(cuid())
  key          String
  languageCode Language @map("language_code")
  value        String   @db.Text

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([key, languageCode])
  @@schema("public")
}

model ContactMessage {
  id      String               @id @default(cuid())
  name    String
  email   String
  subject String
  message String               @db.Text
  status  ContactMessageStatus @default(NEW)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@schema("public")
}

model CmsSection {
  id           String         @id @default(cuid())
  title        String
  key          String
  content      String         @db.Text
  position     Int
  isActive     Boolean        @default(true) @map("is_active")
  languageCode Language       @map("language_code")
  type         CmsSectionType

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([key, languageCode])
  @@schema("public")
}

model Favorite {
  id      String  @id @default(cuid())
  userId  String  @map("user_id") @db.Uuid
  profile Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId String  @map("event_id")
  event   Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, eventId])
  @@map("favorites")
  @@schema("public")
}

model Rating {
  id      String  @id @default(cuid())
  value   Int     @default(0)
  comment String? @db.Text
  userId  String  @map("user_id") @db.Uuid
  profile Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId String  @map("event_id")
  event   Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, eventId])
  @@map("ratings")
  @@schema("public")
}

model Notification {
  id       String  @id @default(cuid())
  title    String
  content  String  @db.Text
  type     String
  isRead   Boolean @default(false) @map("is_read")
  metadata Json?
  userId   String  @map("user_id") @db.Uuid
  profile  Profile @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId, isRead])
  @@map("notifications")
  @@schema("public")
}

model UserSetting {
  id                String  @id @default(cuid())
  userId            String  @unique @map("user_id") @db.Uuid
  profile           Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
  receiveNewsletter Boolean @default(true) @map("receive_newsletter")
  eventReminders    Boolean @default(true) @map("event_reminders")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user_settings")
  @@schema("public")
}

model PartnerRequest {
  id             String  @id @default(cuid())
  restaurantName String  @map("restaurant_name")
  contactEmail   String  @map("contact_email")
  contactName    String  @map("contact_name")
  message        String? @db.Text
  status         String  @default("PENDING") // PENDING, APPROVED, REJECTED

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("partner_requests")
  @@schema("public")
}

model Admin {
  id                String  @id @db.Uuid // This is the user_id from auth.users, effectively Profile.id
  profile           Profile @relation(fields: [id], references: [id], onDelete: Cascade, map: "admin_id_fkey") // Explicit map for relation name
  canManageUsers    Boolean @default(false) @map("can_manage_users")
  canManageSettings Boolean @default(false) @map("can_manage_settings")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("admins")
  @@schema("public")
}

model audit_log_entries {
  instance_id    String?   @db.Uuid
  id             String    @id @db.Uuid
  payload        Json?     @db.Json
  created_at     DateTime? @db.Timestamp(6)
  ip_address     String    @default("") @db.VarChar(64)
  user_id        String?   @db.Uuid
  actor_id       String?   @db.Uuid
  actor_username String?
  actor_via_sso  Boolean?  @default(false)
  log_type       String?

  @@index([instance_id], map: "audit_logs_instance_id_idx")
  @@schema("auth")
}

model flow_state {
  id                     String                @id @db.Uuid
  user_id                String?               @db.Uuid
  auth_code              String
  code_challenge_method  code_challenge_method
  code_challenge         String
  provider_type          String
  provider_access_token  String?
  provider_refresh_token String?
  created_at             DateTime?             @db.Timestamp(6)
  updated_at             DateTime?             @db.Timestamp(6)
  authentication_method  String
  auth_code_issued_at    DateTime?             @db.Timestamp(6)

  saml_relay_states saml_relay_states[]

  @@index([created_at(sort: Desc)])
  @@index([auth_code])
  @@index([user_id, authentication_method], map: "idx_user_id_auth_method")
  @@schema("auth")
}

model identities {
  provider_id     String
  user_id         String    @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime? @db.Timestamp(6)
  created_at      DateTime? @db.Timestamp(6)
  updated_at      DateTime? @db.Timestamp(6)
  email           String?
  id              String    @id @db.Uuid

  users users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider_id, provider], map: "identities_provider_id_provider_unique")
  @@index([email])
  @@index([user_id])
  @@schema("auth")
}

model instances {
  id         String    @id @db.Uuid
  uuid       String?   @db.Uuid
  raw_base64 String?
  created_at DateTime? @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)

  @@schema("auth")
}

model mfa_amr_claims {
  session_id            String   @db.Uuid
  created_at            DateTime @db.Timestamp(6)
  updated_at            DateTime @db.Timestamp(6)
  authentication_method String
  id                    String   @id @db.Uuid

  sessions sessions @relation(fields: [session_id], references: [id], onDelete: Cascade)

  @@unique([session_id, authentication_method], map: "mfa_amr_claims_session_id_authentication_method_pkey")
  @@schema("auth")
}

model mfa_challenges {
  id          String    @id @db.Uuid
  factor_id   String    @db.Uuid
  created_at  DateTime  @db.Timestamp(6)
  verified_at DateTime? @db.Timestamp(6)
  ip_address  String    @db.VarChar(64)

  mfa_factors mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade)

  @@index([created_at(sort: Desc)], map: "mfa_challenge_created_at_idx")
  @@schema("auth")
}

model mfa_factors {
  id                 String        @id @db.Uuid
  user_id            String        @db.Uuid
  friendly_name      String?
  factor_type        factor_type
  status             factor_status
  created_at         DateTime      @db.Timestamp(6)
  updated_at         DateTime      @db.Timestamp(6)
  secret             String?
  last_challenged_at DateTime?     @unique @db.Timestamp(6)
  phone              String?

  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  mfa_challenges mfa_challenges[]

  @@unique([user_id, phone], map: "unique_phone_factor_per_user")
  @@index([user_id, created_at], map: "factor_id_created_at_idx")
  @@index([user_id])
  @@schema("auth")
}

model one_time_tokens {
  id         String              @id @db.Uuid
  user_id    String              @db.Uuid
  token_type one_time_token_type
  token_hash String
  relates_to String
  created_at DateTime            @default(now()) @db.Timestamp(6)

  users users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, token_type])
  @@index([relates_to], map: "one_time_tokens_relates_to_hash_idx", type: Hash)
  @@index([token_hash], map: "one_time_tokens_token_hash_hash_idx", type: Hash)
  @@schema("auth")
}

model refresh_tokens {
  instance_id String?
  id          BigInt    @id @default(autoincrement())
  token       String?   @unique(map: "refresh_tokens_token_unique") @db.VarChar(255)
  user_id     String?   @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime? @db.Timestamp(6)
  updated_at  DateTime? @db.Timestamp(6)
  parent      String?   @db.VarChar(255)
  session_id  String?   @db.Uuid

  sessions sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade)

  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
  @@index([updated_at(sort: Desc)])
  @@schema("auth")
}

model saml_providers {
  id                String    @id @db.Uuid
  sso_provider_id   String?   @db.Uuid
  entity_id         String    @unique
  metadata_xml      String
  metadata_url      String?
  attribute_mapping Json?
  created_at        DateTime? @db.Timestamp(6)
  updated_at        DateTime? @db.Timestamp(6)
  name_id_format    String?

  sso_providers     sso_providers?      @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade)

  @@index([sso_provider_id])
  @@schema("auth")
}

model saml_relay_states {
  id              String    @id @db.Uuid
  sso_provider_id String?   @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  from_ip_address String?
  created_at      DateTime? @db.Timestamp(6)
  updated_at      DateTime? @db.Timestamp(6)
  flow_state_id   String?   @db.Uuid

  flow_state       flow_state?     @relation(fields: [flow_state_id], references: [id], onDelete: Cascade)
  sso_providers    sso_providers?  @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade)

  @@index([created_at(sort: Desc)])
  @@index([for_email])
  @@index([sso_provider_id])
  @@schema("auth")
}

model schema_migrations {
  version String @id @db.VarChar(255)

  @@schema("auth")
}

model sessions {
  id           String     @id @db.Uuid
  user_id      String     @db.Uuid
  created_at   DateTime?  @db.Timestamp(6)
  updated_at   DateTime?  @db.Timestamp(6)
  factor_id    String?    @db.Uuid
  aal          aal_level?
  not_after    DateTime?  @db.Timestamp(6)
  refreshed_at DateTime?
  user_agent   String?
  ip           String?    @db.VarChar(64)
  tag          String?

  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  mfa_amr_claims mfa_amr_claims[]
  refresh_tokens refresh_tokens[]

  @@index([not_after(sort: Desc)])
  @@index([user_id])
  @@index([user_id, created_at], map: "user_id_created_at_idx")
  @@schema("auth")
}

model sso_domains {
  id              String    @id @db.Uuid
  sso_provider_id String?   @db.Uuid
  domain          String
  created_at      DateTime? @db.Timestamp(6)
  updated_at      DateTime? @db.Timestamp(6)

  sso_providers sso_providers? @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade)

  @@index([sso_provider_id])
  @@schema("auth")
}

model sso_providers {
  id          String    @id @db.Uuid
  resource_id String?
  created_at  DateTime? @db.Timestamp(6)
  updated_at  DateTime? @db.Timestamp(6)

  saml_providers    saml_providers[]
  saml_relay_states saml_relay_states[]
  sso_domains       sso_domains[]

  @@schema("auth")
}

model users {
  instance_id               String?           @db.Uuid
  id                        String            @id @db.Uuid
  aud                       String?           @db.VarChar(255)
  role                      String?           @db.VarChar(255)
  email                     String?           @unique(map: "users_email_key") @db.VarChar(255)
  encrypted_password        String?           @db.VarChar(255)
  email_confirmed_at        DateTime?         @db.Timestamp(6)
  invited_at                DateTime?         @db.Timestamp(6)
  confirmation_token        String?           @unique(map: "users_confirmation_token_key") @db.VarChar(255)
  confirmation_sent_at      DateTime?         @db.Timestamp(6)
  recovery_token            String?           @unique(map: "users_recovery_token_key") @db.VarChar(255)
  recovery_sent_at          DateTime?         @db.Timestamp(6)
  email_change_token_new    String?           @unique(map: "users_email_change_token_new_key") @db.VarChar(255)
  email_change              String?           @db.VarChar(255)
  email_change_sent_at      DateTime?         @db.Timestamp(6)
  last_sign_in_at           DateTime?         @db.Timestamp(6)
  raw_app_meta_data         Json?
  raw_user_meta_data        Json?
  is_sso_user               Boolean?          @default(false)
  created_at                DateTime?         @db.Timestamp(6)
  updated_at                DateTime?         @db.Timestamp(6)
  phone                     String?           @unique
  phone_confirmed_at        DateTime?
  phone_change              String?           @default("")
  phone_change_token        String?           @default("")
  phone_change_sent_at      DateTime?
  confirmed_at              DateTime?         @default(dbgenerated("LEAST(email_confirmed_at, phone_confirmed_at)"))
  email_change_token_current String?           @unique @default("") @db.VarChar(255)
  email_change_confirm_status Int?            @default(0) @db.SmallInt
  banned_until              DateTime?
  reauthentication_token    String?           @unique @default("") @db.VarChar(255)
  reauthentication_sent_at  DateTime?
  is_anonymous              Boolean?          @default(false)

  identities      identities[]
  mfa_factors     mfa_factors[]
  one_time_tokens one_time_tokens[]
  sessions        sessions[]

  @@index([instance_id])
  @@index([is_anonymous])
  @@schema("auth")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum code_challenge_method {
  s256
  plain

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn
  phone

  @@schema("auth")
}

enum one_time_token_type {
  confirmation_token
  reauthentication_token
  recovery_token
  email_change_token_new
  email_change_token_current
  phone_change_token

  @@schema("auth")
}
